package me.fix3dll.hypixelah;

import java.awt.*;

import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class GUI extends javax.swing.JFrame {

    public StyledDocument document;
    public static String text;
    public static String filter = "NO FILTER";

    /**
     * Creates new form newGUI
     */
    public GUI() throws BadLocationException {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        setLocationRelativeTo(null);
        print("Araştırmak istediğin eşyanın oyundaki tam adını gir: \n", 255, 255, 255);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane(console);
        console = new CustomConsole();
        filterBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hypixel Auction API");
        setIconImages(icons());
        setPreferredSize(new java.awt.Dimension(670, 381));
        setResizable(false);
        setSize(new java.awt.Dimension(670, 381));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        input.setFont(new java.awt.Font("Monospaced", Font.PLAIN, 12)); // NOI18N
        input.setOpaque(false);
        input.addActionListener(this::inputActionPerformed);
        getContentPane().add(input, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 319, 564, 23));

        scrollPane.setOpaque(false);
        scrollPane.getViewport().setOpaque(false);
        scrollPane.setBorder(null);

        console.setEditable(false);
        console.setFont(new java.awt.Font("Monospaced", Font.PLAIN, 12)); // NOI18N
        console.setOpaque(false);
        document = console.getStyledDocument();
        scrollPane.setViewportView(console);

        getContentPane().add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 654, 319));

        filterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No filter", "Common", "Uncommon", "Rare", "Epic", "Legendary", "Mythic", "Divine", "Special", "Very Special" }));
        filterBox.addActionListener(this::filterBoxActionPerformed);
        getContentPane().add(filterBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(564, 319, 90, 23));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        text = input.getText();
        if (text.length() > 1) {
            console.setCaretPosition(console.getDocument().getLength());
            input.selectAll();
        }
    }//GEN-LAST:event_inputActionPerformed

    private void filterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBoxActionPerformed
        filter = filterBox.getSelectedItem().toString().toUpperCase(Locale.ENGLISH)
                .replace("DIVINE", "SUPREME")
                .replace("VERY SPECIAL", "VERY_SPECIAL");
    }//GEN-LAST:event_filterBoxActionPerformed

    public void print (String str, int x, int y, int z) throws BadLocationException {
        Style style = console.addStyle("Style", null);

        Matcher matchAmpersand = Pattern.compile("&").matcher(str);
        Matcher matchRGB = Pattern.compile("(?<=&\\().*?(?=\\))").matcher(str);
        Matcher matchStr = Pattern.compile("(?<=\\)).*?(.*?)&").matcher(str);

        int foundAmper = 0, foundRGB = 0, foundStr = 0;
        while (matchAmpersand.find()) {
            foundAmper++;
        } if (foundAmper == 0) {
            StyleConstants.setForeground(style, new Color(x, y, z));
            document.insertString(document.getLength(), str, style);
            return;
        }

        ArrayList rgbArray = new ArrayList();
        while (matchRGB.find()) {
            rgbArray.add(matchRGB.group());
            foundRGB++;
        }

        ArrayList strArray = new ArrayList();
        while (matchStr.find()) {
            strArray.add(matchStr.group().replace("&",""));
            foundStr++;
        }
        Matcher lastAmper = Pattern.compile("^(?:[^)]*\\)){"+foundAmper+"}([^*]*)").matcher(str);
        if(lastAmper.find()) {
            strArray.add(lastAmper.group(1));
        }

        boolean firstPrinted = false;
        for (int i = 0; i < foundAmper; i++) {
            String beforeAmper = null;
            Matcher firstAmper = Pattern.compile("(.*?)&").matcher(str);
            if (firstAmper.find()) {
                if (firstAmper.group().length() < 2 || firstPrinted) {
                    String[] RGB = rgbArray.get(i).toString().split(",");
                    x = parseInt(RGB[0]); y = parseInt(RGB[1]); z = parseInt(RGB[2]);
                    beforeAmper = strArray.get(i).toString();
                } else if (!firstPrinted) {
                    beforeAmper = firstAmper.group().replace("&","");
                    i--;
                    firstPrinted = true;
                }
            }
            StyleConstants.setForeground(style, new Color(x, y, z));
            document.insertString(document.getLength(), beforeAmper, style);
        } document.insertString(document.getLength(), "\n",style);
    }

    private List icons() {
        List<Image> icons  = new ArrayList();
        icons.add(new ImageIcon(getClass().getResource("/images/16x16.png")).getImage());
        icons.add(new ImageIcon(getClass().getResource("/images/32x32.png")).getImage());
        icons.add(new ImageIcon(getClass().getResource("/images/64x64.png")).getImage());
        icons.add(new ImageIcon(getClass().getResource("/images/128x128.png")).getImage());
        return icons;
    }

    class CustomConsole extends JTextPane {
        public CustomConsole() {
            super();
        }

        @Override
        protected void paintComponent(Graphics g) {
            if (ConfigManager.read("backgroundRGB").equals("")) {
                g.setColor(new Color(255,170,0));
            } else {
                int[] bgRGB = ConfigManager.readBgRGB();
                g.setColor(new Color(bgRGB[0],bgRGB[1],bgRGB[2]));
            }

            g.fillRect(0, 0, getWidth(), getHeight());

            Image img;
            if (ConfigManager.read("backgroundPath").equals("")) {
                img = new ImageIcon(getClass().getResource("/images/bg.png")).getImage();
            } else {
                img = new ImageIcon(ConfigManager.readBgPath()).getImage();
            }
            g.drawImage(img, 0, 0, this);

            super.paintComponent(g);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane console;
    private javax.swing.JComboBox<String> filterBox;
    protected javax.swing.JTextField input;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}